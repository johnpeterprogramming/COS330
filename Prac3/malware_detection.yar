import "pe"
/*
 * YARA Rules for Malware Detection Based on Static Analysis Features
 * Author: John-Peter Krause u23533529
 * Date: 2025
 * Description: Three rules targeting different malware characteristics based on 
 *              import patterns, suspicious keywords, and network activity indicators
 */

rule HighImportCountMalware : malware suspicious_imports
{
    meta:
        description = "Detects malware with unusually high import function counts combined with network capabilities"
        author = "John-Peter Krause"
        date = "2025-09-26"
        severity = "medium"
        
    strings:
        // Network-related function imports that appear in malicious samples
        $wininet1 = "WinHttpOpen" nocase
        $wininet2 = "InternetOpen" nocase
        $wininet3 = "URLDownloadToFile" nocase
        $wininet4 = "HttpSendRequest" nocase
        $wininet5 = "InternetConnect" nocase
        
        // System manipulation functions common in malware
        $advapi1 = "RegCreateKey" nocase
        $advapi2 = "RegSetValue" nocase
        $advapi3 = "OpenProcessToken" nocase
        $advapi4 = "AdjustTokenPrivileges" nocase
        
        // Process/service manipulation
        $kernel1 = "CreateProcess" nocase
        $kernel2 = "WriteProcessMemory" nocase
        $kernel3 = "VirtualAllocEx" nocase
        
    condition:
        // PE file with high import count (estimated by string matches)
        uint16(0) == 0x5A4D and  // MZ header
        (
            // High number of import-related strings suggests many imports
            (#wininet1 + #wininet2 + #wininet3 + #wininet4 + #wininet5 + 
             #advapi1 + #advapi2 + #advapi3 + #advapi4 + 
             #kernel1 + #kernel2 + #kernel3) >= 8 or
            
            // Alternative: Look for multiple DLL references indicating high import count
            (pe.number_of_imports > 200)
        ) and
        // Must have network capabilities (key differentiator)
        any of ($wininet*) and
        // Must have system manipulation capabilities
        any of ($advapi*)
}

rule NetworkDownloaderMalware : malware downloader network_activity
{
    meta:
        description = "Detects malware with download capabilities using curl, wget, or similar tools"
        author = "John-Peter Krause"  
        date = "2025-09-26"
        severity = "high"
        
    strings:
        // High-frequency suspicious keywords from analysis
        $curl1 = "curl" nocase
        $curl2 = "curl.exe" nocase
        $curl3 = "libcurl" nocase
        
        $download1 = "download" nocase
        $download2 = "DownloadFile" nocase
        $download3 = "URLDownload" nocase
        
        $base64_1 = "base64" nocase
        $base64_2 = "Base64" nocase
        
        // Tor/onion references (high malware indicator)
        $onion1 = ".onion" nocase
        $onion2 = "onion" nocase
        
        $wget1 = "wget" nocase
        $wget2 = "wget.exe" nocase
        
        // Command execution patterns
        $cmd1 = "cmd.exe" nocase
        $cmd2 = "powershell" nocase
        $cmd3 = "/c " nocase
        
    condition:
        uint16(0) == 0x5A4D and  // PE file
        filesize < 50MB and      // Reasonable size limit
        (
            // High curl usage (primary malware indicator from analysis)
            #curl1 >= 5 or #curl2 >= 3 or #curl3 >= 3 or
            
            // Download + encoding combination
            (any of ($download*) and any of ($base64*)) or
            
            // Tor usage (strong malware indicator)
            any of ($onion*) or
            
            // Multiple suspicious tool combinations
            (any of ($curl*) and any of ($download*)) or
            (any of ($wget*) and any of ($cmd*)) or
            
            // High concentration of download-related terms
            (#download1 + #download2 + #download3) >= 8
        )
}

rule LowStringCountObfuscatedMalware : malware obfuscated packed
{
    meta:
        description = "Detects potentially obfuscated malware with suspiciously low string counts but high functionality"
        author = "John-Peter Krause"
        date = "2025-09-26" 
        severity = "medium"
        
    strings:
        // Critical system DLLs that malware commonly uses
        $dll1 = "USER32.dll" nocase
        $dll2 = "ADVAPI32.dll" nocase  
        $dll3 = "KERNEL32.dll" nocase
        $dll4 = "WININET.dll" nocase
        $dll5 = "WS2_32.dll" nocase
        $dll6 = "SHELL32.dll" nocase
        
        // Minimal but suspicious function imports
        $func1 = "CreateFileA" nocase
        $func2 = "WriteFile" nocase
        $func3 = "GetProcAddress" nocase
        $func4 = "LoadLibraryA" nocase
        $func5 = "VirtualAlloc" nocase
        $func6 = "CreateProcessA" nocase
        
        // Encoding/crypto indicators despite low string count
        $crypto1 = "CryptAcquireContext" nocase
        $crypto2 = "CryptGenKey" nocase
        $encode1 = "base64" nocase
        $encode2 = "decode" nocase
        
    condition:
        uint16(0) == 0x5A4D and  // PE file
        filesize > 10KB and     // Must have some substance
        filesize < 10MB and     // But not too large
        
        // Low string density (estimated by common API absence)
        // Malware: 10K-80K strings vs Benign: millions of strings
        // This heuristic looks for files with functionality but few readable strings
        (
            // Has multiple critical DLLs (indicating functionality)
            (any of ($dll1, $dll2, $dll3, $dll4, $dll5, $dll6)) and
            
            // Has core malware functions
            any of ($func3, $func4, $func5) and  // Dynamic loading/memory manipulation
            
            // But has suspiciously few total identifiable strings
            // (Heuristic: fewer common Windows API strings than expected)
            not (
                pe.imports("user32.dll", "MessageBoxA") and
                pe.imports("user32.dll", "GetWindowTextA") and  
                pe.imports("kernel32.dll", "GetModuleFileNameA") and
                pe.imports("kernel32.dll", "GetCommandLineA")
            )
        ) or
        
        // Alternative condition: Has crypto/encoding with minimal other strings
        (
            any of ($crypto*) and 
            any of ($encode*) and
            (#func1 + #func2 + #func3 + #func4 + #func5 + #func6) <= 3
        )
}

